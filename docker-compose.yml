version: '3.8'

x-default-logging: &logging
  driver: "json-file"
  options:
    max-size: "5m"
    max-file: "2"

services:

  couchdb:
    build:
      context: .
      dockerfile: Dockerfile-couchdb
    volumes:
      - ./couchdb/:/tmp/
      - .:/app
    environment:
      - "COUCHDB_USER=imo"
      - "COUCHDB_PASSWORD=123456"
    ports:
      - "5984:5984"
    networks:
      - app-network
      # - server_network

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5984/_up"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  envoy-controller:
    image: envoy_controller:20241018
    depends_on:
      couchdb:
        condition: service_healthy
    volumes:
      - ./controller/controller.crt:/controller/controller.crt
      - ./controller/controller.key:/controller/controller.key
      - .:/app
    ports:
      - "18000:18000"
      - "19000:19000"
    command:
      - "-dbUserName=imo"
      - -dbHost=couchdb
      - "-updateTime=10s"
      - "-dbPort=5984"
      - "-dbPassword=123456"
      - "-dbName=users"
    networks:
      - app-network
      # - server_network


  envoy-client:
    image: envoyproxy/envoy:v1.29-latest
    depends_on:
      - envoy-controller
      - couchdb
    volumes:
      - ./envoy-dynamic/envoy-client/controller.crt:/etc/envoy/controller.crt
      - ./envoy-dynamic/envoy-client/envoy.yaml:/etc/envoy/envoy.yaml
      - ./envoy-dynamic/envoy-client/cert.pem:/etc/envoy/cert.pem
      - ./envoy-dynamic/envoy-client/key.pem:/etc/envoy/key.pem
      - .:/app

      # - ./envoy-static/envoy-client/envoy.yaml:/etc/envoy/envoy.yaml
      # - ./envoy-static/envoy-client/cert.pem:/etc/envoy/cert.pem
      # - ./envoy-static/envoy-client/key.pem:/etc/envoy/key.pem
    ports:
      - "9901:9901"
      - "10000:10000"
      # - "10000:10000/udp"
    networks:
      - app-network
      # - client_network


  envoy-server:
    image: envoyproxy/envoy:v1.29-latest
    #image: bitnami/envoy:latest
    depends_on:
      - envoy-controller
      - couchdb
    volumes:
      - ./envoy-dynamic/envoy-server/controller.crt:/etc/envoy/controller.crt
      - ./envoy-dynamic/envoy-server/envoy.yaml:/etc/envoy/envoy.yaml
      - ./envoy-dynamic/envoy-server/cert.pem:/etc/envoy/cert.pem
      - ./envoy-dynamic/envoy-server/key.pem:/etc/envoy/key.pem
      - .:/app

      # - ./envoy-static/envoy-server/envoy.yaml:/etc/envoy/envoy.yaml
      # - ./envoy-static/envoy-server/cert.pem:/etc/envoy/cert.pem
      # - ./envoy-static/envoy-server/key.pem:/etc/envoy/key.pem
    ports:
      - "9001:9001"
      - "18080:18080"
      # - "18080:18080/udp"
    networks:
      - app-network
      # - server_network



  nginx:
    image: nginx:latest
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/testFiles/:/usr/share/nginx/html/
      - ./nginx/cert.pem:/etc/nginx/cert.pem
      - ./nginx/key.pem:/etc/nginx/key.pem
      - .:/app
    ports:
      - "443:443"
    networks:
      - app-network

      # - server_network


  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus_otel.yml:/etc/prometheus/prometheus.yml
      - .:/app
    ports:
      - "9090:9090"
    networks:
      - app-network
      # - server_network


  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - .:/app
    depends_on:
      - prometheus
    networks:
      - app-network
      # - server_network

  otelcol:
    image: otel/opentelemetry-collector:latest
    ports:
   #    - "8889:8889"
   #   - "8888:8888"
   #   - "4317:4317"
  #     - "4318:4318"
      - "4319:4319"

    command: [ "--config=/etc/otelcol/config.yaml"]
    logging: *logging
    volumes:
      - ./otel-collector-config.yaml:/etc/otelcol/config.yaml
      - .:/app
    networks:
      - app-network

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      #- "4317:4317"
      - "16686:16686"
      #- "14250:14250"
    networks:
      - app-network

  ubuntu-curl:
    build:
      context: .
      dockerfile: Dockerfile-curl
    networks:
      - app-network
      # - client_network
    ports:
      - "5055:5055"
      
  flask-app:
    build:
      context: .
      dockerfile: Dockerfile-flask 
    ports:
      - "5000:5000" 
    volumes:
      - .:/app  
      - /var/run/docker.sock:/var/run/docker.sock 
      - /usr/bin/docker:/usr/bin/docker 
    environment:
      - FLASK_ENV=development
      - DOCKER_COMPOSE_PATH=/app  
    working_dir: /app/mspj 
    command: flask run --host=0.0.0.0 --port=5000  
    networks:
      - app-network


  # linux-router:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile-router
  #   privileged: true
  #   cap_add:
  #     - NET_ADMIN
  #   networks:
  #     - server_network
  #       # ipv4_address: 10.0.1.3
  #     - client_network
  #       # ipv4_address: 10.0.2.3

networks:
  app-network:
    driver: bridge
        
# networks:
#   server_network:
#     driver: bridge
#     ipam:
#       config:
#         - subnet: 10.0.1.0/24
#           # gateway: 10.0.1.3
#     driver_opts:
#       com.docker.network.bridge.enable_ip_masquerade: "false"
#   client_network:
#     driver: bridge
#     ipam:
#       config:
#         - subnet: 10.0.2.0/24
#           # gateway: 10.0.2.3
#     driver_opts:
#       com.docker.network.bridge.enable_ip_masquerade: "false"

volumes:
  couchdb_data:
  grafana_data:

